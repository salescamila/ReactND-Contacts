{"ast":null,"code":"import _classCallCheck from \"/Volumes/HD/Udacity/React/ReactND-Contacts/reactnd-contacts-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/HD/Udacity/React/ReactND-Contacts/reactnd-contacts-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/HD/Udacity/React/ReactND-Contacts/reactnd-contacts-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/HD/Udacity/React/ReactND-Contacts/reactnd-contacts-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/HD/Udacity/React/ReactND-Contacts/reactnd-contacts-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Volumes/HD/Udacity/React/ReactND-Contacts/reactnd-contacts-app/src/ListContacts.js\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nvar ListContacts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ListContacts, _Component);\n\n  function ListContacts() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ListContacts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListContacts)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      query: ''\n    };\n\n    _this.UpdateQuery = function (text) {\n      _this.setState(function () {\n        return {\n          query: text.trim()\n        };\n      });\n    };\n\n    _this.clearQuery = function () {\n      _this.UpdateQuery('');\n    };\n\n    return _this;\n  }\n\n  _createClass(ListContacts, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var query = this.state.query;\n      var _this$props = this.props,\n          contacts = _this$props.contacts,\n          onDeleteContact = _this$props.onDeleteContact;\n      var ShowingContact = query === '' ? contacts : contacts.filter(function (c) {\n        return c.name.toLowerCase().includes(query.toLowerCase());\n      });\n      return React.createElement(\"div\", {\n        className: \"list-contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-contacts-top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"search-contacts\",\n        type: \"text\",\n        placeholder: \"Search contact\",\n        value: query,\n        onChange: function onChange(event) {\n          return _this2.UpdateQuery(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        href: \"#create\",\n        onClick: onNavigate,\n        className: \"add-contact\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Add Contact\")), ShowingContact.length !== contacts.length && React.createElement(\"div\", {\n        className: \"showing-contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Now showing \", ShowingContact.length, \" of \", contacts.length), React.createElement(\"button\", {\n        onClick: this.clearQuery,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Show all of contacts\")), React.createElement(\"ol\", {\n        className: \"contact-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, ShowingContact.map(function (contact) {\n        return React.createElement(\"li\", {\n          key: contact.id,\n          className: \"contact-list-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"contact-avatar\",\n          style: {\n            backgroundImage: \"url(\".concat(contact.avatarURL, \")\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"contact-details\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, contact.name), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, contact.handle)), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return onDeleteContact(contact);\n          },\n          className: \"contact-remove\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \"Remove\"));\n      })));\n    }\n  }]);\n\n  return ListContacts;\n}(Component);\n\nListContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired\n};\nexport default ListContacts;","map":{"version":3,"sources":["/Volumes/HD/Udacity/React/ReactND-Contacts/reactnd-contacts-app/src/ListContacts.js"],"names":["PropTypes","React","Component","ListContacts","state","query","UpdateQuery","text","setState","trim","clearQuery","props","contacts","onDeleteContact","ShowingContact","filter","c","name","toLowerCase","includes","event","target","value","onNavigate","length","map","contact","id","backgroundImage","avatarURL","handle","propTypes","array","isRequired","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nclass ListContacts extends Component {\n  static propTypes = {\n    contacts: PropTypes.array.isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n  }\n\n  state = {\n    query: ''\n  }\n\n  UpdateQuery = (text) => {\n    this.setState(() => ({\n      query: text.trim()\n    }))\n  }\n\n  clearQuery = () => {\n    this.UpdateQuery('');\n  }\n\n  render() {\n    const { query } = this.state\n    const { contacts, onDeleteContact } = this.props\n\n    const ShowingContact = query === ''\n      ? contacts\n      : contacts.filter((c) => (\n        c.name.toLowerCase().includes(query.toLowerCase())\n      ))\n\n    return (\n      <div className=\"list-contacts\">\n        <div className=\"list-contacts-top\">\n          <input\n            className=\"search-contacts\"\n            type='text'\n            placeholder=\"Search contact\"\n            value={query}\n            onChange={(event) => (this.UpdateQuery(event.target.value))}\n          />\n          <a\n            href='#create'\n            onClick={onNavigate}\n            className='add-contact'\n          >Add Contact</a>\n        </div>\n\n        {ShowingContact.length !== contacts.length && (\n          <div className=\"showing-contacts\">\n            <span>\n              Now showing {ShowingContact.length} of {contacts.length}\n            </span>\n            <button onClick={this.clearQuery}>Show all of contacts</button>\n          </div>\n        )}\n\n        <ol className='contact-list'>\n          {ShowingContact.map((contact) => (\n            <li key={contact.id} className='contact-list-item'>\n              <div\n                className='contact-avatar'\n                style={{\n                  backgroundImage: `url(${contact.avatarURL})`\n                }}\n              ></div>\n              <div className='contact-details'>\n                <p>{contact.name}</p>\n                <p>{contact.handle}</p>\n              </div>\n              <button\n                onClick={() => onDeleteContact(contact)}\n                className='contact-remove'>\n                Remove\n              </button>\n            </li>\n          ))}\n        </ol>\n      </div>\n    )\n  }\n}\n\nexport default ListContacts"]},"metadata":{},"sourceType":"module"}